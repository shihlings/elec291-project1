0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses an LED as voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26            TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             27   
0000             28            TIMER2_RATE   EQU 500     ; 500Hz, for a timer tick of 2ms
0000             29   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             30   
0000             31   
0000             32   ORG 0x0000
0000 020692      33            ljmp main
0003             34   
002B             35   ORG 0x002B
002B 020365      36            ljmp Timer2_ISR
002E             37                    
002E             38   cseg
002E             39   ; These 'equ' must match the hardware wiring
002E             40   LCD_RS equ P1.3
002E             41   LCD_E  equ P1.4
002E             42   LCD_D4 equ P0.0
002E             43   LCD_D5 equ P0.1
002E             44   LCD_D6 equ P0.2
002E             45   LCD_D7 equ P0.3  
002E             46   
                 48   	$LIST
00E2             50   
00E2             51   ; These register definitions needed by 'math32.inc'
0030             52   DSEG at 30H
0030             53   x:   ds 4
0034             54   y:   ds 4
0038             55   cold_junc_temp:  ds 4
003C             56   bcd: ds 5
0041             57   VREF: ds 2
0043             58   
0043             59   ; Soldering parameters
0043             60   soak_temp:       ds 1
0044             61   soak_time:       ds 1
0045             62   reflow_temp:     ds 1
0046             63   reflow_time:     ds 1
0047             64   
0047             65   state:   ds 1                    ; 0 is stopped, 1 is heating, 2 is soaking, 3 is reflowing, 4 is cooling
0048             66   count_2ms:       ds 1
0049             67   timer_secs:      ds 1
004A             68   timer_mins:      ds 1
004B             69   
004B             70   param:   ds 1                    ; Determines which parameter is being edited, in the order above
004C             71            
0000             72   BSEG
0000             73   mf: dbit 1
0001             74   
0001             75   half_seconds_flag:       dbit 1
0002             76            
0002             77   ; Buttons are active low
0002             78   Select_button:   dbit 1
0003             79   Down_button:     dbit 1
0004             80   Up_button:       dbit 1
0005             81   Start_button:    dbit 1
0006             82   
                546   $LIST
                 84   	$LIST
0352             86   
0352 DF432000    87   Celsius_Unit_String:     db 0xDF, 'C ', 0
0356 53542000    88   Stop_State_String:       db 'ST ', 0
035A 48542000    89   Heating_State_String:    db 'HT ', 0
035E 534B2000    90   Soaking_State_String:    db 'SK ', 0
0362 524600      91   Reflow_State_String:     db 'RF', 0
0365             92   
0365             93   Timer2_ISR:
0365 C2CF        94            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0367             95            
0367             96            ; The two registers used in the ISR must be saved in the stack
0367 C0E0        97            push acc
0369 C0D0        98            push psw
036B             99            
036B            100            ; Increment the two millisecond counter
036B 0548       101            inc count_2ms
036D            102   
036D            103   Inc_Done:
036D            104            ; Check if half a second has passed
036D E548       105            mov a, count_2ms
036F B4FA2A     106            cjne a, #250, Timer2_ISR_done
0372 1206E5     107            lcall Read_Temp
0375            108            
0375            109                                    ; 500 milliseconds have passed.
0375 200107     110            jb half_seconds_flag, Inc_Seconds
0378 D201       111            setb half_seconds_flag
037A E4         112            clr a
037B F548       113            mov count_2ms, a
037D 801D       114            sjmp Timer2_ISR_done
037F            115   Inc_Seconds:
037F E549       116            mov a, timer_secs
0381 2401       117            add a, #0x01
0383 D4         118            da a
0384 6460       119            xrl a, #0x60
0386 6008       120            jz Inc_Minutes
0388 6460       121            xrl a, #0x60
038A F549       122            mov timer_secs, a
038C C201       123            clr half_seconds_flag
038E 800C       124            sjmp Timer2_ISR_done
0390            125   Inc_Minutes:
0390 E4         126            clr a
0391 C201       127            clr half_seconds_flag
0393 F549       128            mov timer_secs, a
0395 E54A       129            mov a, timer_mins
0397 2401       130            add a, #0x01
0399 D4         131            da a
039A F54A       132            mov timer_mins, a
039C            133   Timer2_ISR_Done:
039C D0D0       134            pop psw
039E D0E0       135            pop acc
03A0 32         136            reti
03A1            137            
03A1            138   Init_All:
03A1            139            ; Configure all the pins for bidirectional I/O
03A1 75AC00     140            mov     P3M1, #0x00
03A4 75AD00     141            mov     P3M2, #0x00
03A7 75B300     142            mov     P1M1, #0x00
03AA 75B400     143            mov     P1M2, #0x00
03AD 75B100     144            mov     P0M1, #0x00
03B0 75B200     145            mov     P0M2, #0x00
03B3            146            
03B3 438E10     147            orl     CKCON, #0x10 ; CLK is the input for timer 1
03B6 438780     148            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03B9 759852     149            mov     SCON, #0x52
03BC 53C4DF     150            anl     T3CON, #0b11011111
03BF 53890F     151            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03C2 438920     152            orl     TMOD, #0x20 ; Timer 1 Mode 2
03C5 758DF7     153            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03C8 D28E       154            setb TR1
03CA            155            
03CA            156            ; Using timer 0 for delay functions.  Initialize here:
03CA C28C       157            clr     TR0 ; Stop timer 0
03CC 438E08     158            orl     CKCON,#0x08 ; CLK is the input for timer 0
03CF 5389F0     159            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03D2 438901     160            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03D5            161   
03D5            162                                    ; Using timer 2 for keeping time.
03D5 75C800     163            mov T2CON, #0
03D8 75CD7E     164            mov TH2, #high(TIMER2_RELOAD)
03DB 75CC50     165            mov TL2, #low(TIMER2_RELOAD)
03DE            166   
03DE 43C980     167            orl T2MOD, #0x80
03E1 75CB7E     168            mov RCMP2H, #high(TIMER2_RELOAD)
03E4 75CA50     169            mov RCMP2L, #low(TIMER2_RELOAD)
03E7            170            ; Init two millisecond interrupt counter.
03E7 E4         171            clr a
03E8 F548       172            mov count_2ms, a
03EA            173            ; Enable the timer and interrupts
03EA 439B80     174            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
03ED            175            
03ED            176            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
03ED 43B382     177            orl     P1M1, #0b10000010
03F0 53B47D     178            anl     P1M2, #0b01111101
03F3            179            
03F3            180            ; Initialize and start the ADC:
03F3 53E8F0     181            anl ADCCON0, #0xF0
03F6 43E807     182            orl ADCCON0, #0x07 ; Select channel 7
03F9            183            ; AINDIDS select if some pins are analog inputs or digital I/O:
03F9 75F600     184            mov AINDIDS, #0x00 ; Disable all analog inputs
03FC 43F683     185            orl AINDIDS, #0b10000011 ; Activate AIN0 and AIN7 analog inputs
03FF 43E101     186            orl ADCCON1, #0x01 ; Enable ADC
0402            187   
0402 D2AF       188            setb EA
0404            189            
0404 22         190            ret
0405            191            
0405            192   wait_1ms:
0405 C28C       193            clr     TR0 ; Stop timer 0
0407 C28D       194            clr     TF0 ; Clear overflow flag
0409 758CBF     195            mov     TH0, #high(TIMER0_RELOAD_1MS)
040C 758A28     196            mov     TL0,#low(TIMER0_RELOAD_1MS)
040F D28C       197            setb TR0
0411 308DFD     198            jnb     TF0, $ ; Wait for overflow
0414 22         199            ret
0415            200   
0415            201   putchar:
0415 3099FD     202       jnb TI, putchar
0418 C299       203       clr TI
041A F599       204       mov SBUF, a
041C 22         205            ret
041D            206   
041D            207   ; Send a constant-zero-terminated string using the serial port
041D            208   SendString:
041D E4         209       clr A
041E 93         210       movc A, @A+DPTR
041F 6006       211       jz SendStringDone
0421 120415     212       lcall putchar
0424 A3         213       inc DPTR
0425 80F6       214       sjmp SendString
0427            215   SendStringDone:
0427 22         216       ret
0428            217   
0428            218   put_x:
0428 E4         219            clr a
0429 74F0       220            mov a, #240
042B 553E       221            anl a, bcd+2
042D 03         222            rr a
042E 03         223            rr a
042F 03         224            rr a
0430 03         225            rr a
0431 2430       226            add a, #'0'
0433 120415     227            lcall putchar
0436 E4         228            clr a
0437 740F       229            mov a, #15
0439 553E       230            anl a, bcd+2
043B 2430       231            add a, #'0'
043D 120415     232            lcall putchar
0440 E4         233            clr a
0441 74F0       234            mov a, #240
0443 553D       235            anl a, bcd+1
0445 03         236            rr a
0446 03         237            rr a
0447 03         238            rr a
0448 03         239            rr a
0449 2430       240            add a, #'0'
044B 120415     241            lcall putchar
044E E4         242            clr a
044F 740F       243            mov a, #15
0451 553D       244            anl a, bcd+1
0453 2430       245            add a, #'0'
0455 120415     246            lcall putchar
0458 E4         247            clr a
0459 74F0       248            mov a, #240
045B 553C       249            anl a, bcd+0
045D 03         250            rr a
045E 03         251            rr a
045F 03         252            rr a
0460 03         253            rr a
0461 2430       254            add a, #'0'
0463 120415     255            lcall putchar
0466 E4         256            clr a
0467 740F       257            mov a, #15
0469 553C       258            anl a, bcd+0
046B 2430       259            add a, #'0'
046D 120415     260            lcall putchar
0470 740D       261            mov a, #'\r'
0472 120415     262            lcall putchar
0475 740A       263            mov a, #'\n'
0477 120415     264            lcall putchar
047A 22         265            ret
047B            266   
047B            267   ; Wait the number of miliseconds in R2
047B            268   waitms:
047B 120405     269            lcall wait_1ms
047E DAFB       270            djnz R2, waitms
0480 22         271            ret
0481            272   
0481            273   read_pbs:
0481 D295       274            setb P1.5
0483 D202       275            setb Select_button
0485 D203       276            setb Down_button
0487 D204       277            setb Up_button
0489 D205       278            setb Start_button
048B D280       279            setb P0.0
048D D281       280            setb P0.1
048F D282       281            setb P0.2
0491 D283       282            setb P0.3
0493            283   
0493 C283       284            clr P0.3
0495 209505     285            jb P1.5, check_up
0498 3095FD     286            jnb P1.5, $
049B C202       287            clr Select_button
049D            288   check_up:
049D D283       289            setb P0.3
049F C281       290            clr P0.1
04A1 209505     291            jb P1.5, check_down
04A4 3095FD     292            jnb P1.5, $
04A7 C204       293            clr Up_button
04A9            294   check_down:
04A9 D281       295            setb P0.1
04AB C282       296            clr P0.2
04AD 209505     297            jb P1.5, check_start
04B0 3095FD     298            jnb P1.5, $
04B3 C203       299            clr Down_button
04B5            300   check_start:
04B5 D281       301            setb P0.1
04B7 C280       302            clr P0.0
04B9 209505     303            jb P1.5, read_pbs_ret
04BC 3095FD     304            jnb P1.5, $
04BF C205       305            clr Start_button
04C1            306   read_pbs_ret:
04C1 22         307            ret
04C2            308            
04C2            309            
04C2            310   display_units:
04C2 C083       311            push dph
04C4 C082       311            push dpl
04C6 C0E0       311            push acc
04C8 900352     311            mov dptr, #Celsius_Unit_String
04CB 1200BA     311            lcall ?Send_Constant_String
04CE D0E0       311            pop acc
04D0 D082       311            pop dpl
04D2 D083       311            pop dph
04D4 22         312            ret
04D5            313   
04D5            314   display_time:
04D5 C000       315            push ar0
04D7 A84A       315            mov r0, timer_mins
04D9 1200CC     315            lcall ?Display_BCD
04DC D000       315            pop ar0
04DE C0E0       316            push acc
04E0 743A       316            mov a, #':'
04E2 12007D     316            lcall ?WriteData
04E5 D0E0       316            pop acc
04E7 C000       317            push ar0
04E9 A849       317            mov r0, timer_secs
04EB 1200CC     317            lcall ?Display_BCD
04EE D000       317            pop ar0
04F0 22         318            ret
04F1            319            
04F1            320   ; We can display a number any way we want.  In this case with
04F1            321   ; four decimal places.
04F1            322   Display_first_row:
04F1 C0E0       323            push acc
04F3 7401       323            mov a, #1
04F5 14         323            dec a
04F6 1200C7     323            lcall ?Set_Cursor_1 ; Select column and row
04F9 D0E0       323            pop acc
04FB C000       324            push ar0
04FD A83E       324            mov r0, bcd+2
04FF 1200CC     324            lcall ?Display_BCD
0502 D000       324            pop ar0
0504 C000       325            push ar0
0506 A83D       325            mov r0, bcd+1
0508 1200CC     325            lcall ?Display_BCD
050B D000       325            pop ar0
050D C0E0       326            push acc
050F 742E       326            mov a, #'.'
0511 12007D     326            lcall ?WriteData
0514 D0E0       326            pop acc
0516 C000       327            push ar0
0518 A83C       327            mov r0, bcd+0
051A 1200CC     327            lcall ?Display_BCD
051D D000       327            pop ar0
051F 1204C2     328            lcall display_units
0522 1204D5     329            lcall display_time
0525 22         330            ret
0526            331   
0526            332   Display_second_row:
0526 C0E0       333            push acc
0528 7401       333            mov a, #1
052A 14         333            dec a
052B 1200C5     333            lcall ?Set_Cursor_2 ; Select column and row
052E D0E0       333            pop acc
0530 E547       334            mov a, state
0532 B40015     335            cjne a, #0x00, display_heating_state
0535 C083       336            push dph
0537 C082       336            push dpl
0539 C0E0       336            push acc
053B 900356     336            mov dptr, #Stop_State_String
053E 1200BA     336            lcall ?Send_Constant_String
0541 D0E0       336            pop acc
0543 D082       336            pop dpl
0545 D083       336            pop dph
0547 02058C     337            ljmp Display_second_row_b
054A            338   display_heating_state:
054A B40115     339            cjne a, #0x01, display_soaking_state
054D C083       340            push dph
054F C082       340            push dpl
0551 C0E0       340            push acc
0553 90035A     340            mov dptr, #Heating_State_String
0556 1200BA     340            lcall ?Send_Constant_String
0559 D0E0       340            pop acc
055B D082       340            pop dpl
055D D083       340            pop dph
055F 02058C     341            ljmp Display_second_row_b
0562            342   display_soaking_state:
0562 B40215     343            cjne a, #0x02, display_reflow_state
0565 C083       344            push dph
0567 C082       344            push dpl
0569 C0E0       344            push acc
056B 90035E     344            mov dptr, #Soaking_State_String
056E 1200BA     344            lcall ?Send_Constant_String
0571 D0E0       344            pop acc
0573 D082       344            pop dpl
0575 D083       344            pop dph
0577 02058C     345            ljmp Display_second_row_b
057A            346   display_reflow_state:
057A C083       347            push dph
057C C082       347            push dpl
057E C0E0       347            push acc
0580 900362     347            mov dptr, #Reflow_State_String
0583 1200BA     347            lcall ?Send_Constant_String
0586 D0E0       347            pop acc
0588 D082       347            pop dpl
058A D083       347            pop dph
058C            348   Display_second_row_b:
058C C0E0       349            push acc
058E 7431       349            mov a, #'1'
0590 12007D     349            lcall ?WriteData
0593 D0E0       349            pop acc
0595 C000       350            push ar0
0597 A843       350            mov r0, soak_temp
0599 1200CC     350            lcall ?Display_BCD
059C D000       350            pop ar0
059E C0E0       351            push acc
05A0 7420       351            mov a, #' '
05A2 12007D     351            lcall ?WriteData
05A5 D0E0       351            pop acc
05A7 C000       352            push ar0
05A9 A844       352            mov r0, soak_time
05AB 1200CC     352            lcall ?Display_BCD
05AE D000       352            pop ar0
05B0 C0E0       353            push acc
05B2 7420       353            mov a, #' '
05B4 12007D     353            lcall ?WriteData
05B7 D0E0       353            pop acc
05B9 C0E0       354            push acc
05BB 7432       354            mov a, #'2'
05BD 12007D     354            lcall ?WriteData
05C0 D0E0       354            pop acc
05C2 C000       355            push ar0
05C4 A845       355            mov r0, reflow_temp
05C6 1200CC     355            lcall ?Display_BCD
05C9 D000       355            pop ar0
05CB C0E0       356            push acc
05CD 7420       356            mov a, #' '
05CF 12007D     356            lcall ?WriteData
05D2 D0E0       356            pop acc
05D4 C000       357            push ar0
05D6 A846       357            mov r0, reflow_time
05D8 1200CC     357            lcall ?Display_BCD
05DB D000       357            pop ar0
05DD 22         358            ret
05DE            359            
05DE            360            
05DE            361   
05DE            362   Read_ADC:
05DE C2EF       363            clr ADCF
05E0 D2EE       364            setb ADCS ;  ADC start trigger signal
05E2 30EFFD     365       jnb ADCF, $ ; Wait for conversion complete
05E5            366       
05E5            367       ; Read the ADC result and store in [R1, R0]
05E5 E5C2       368       mov a, ADCRL
05E7 540F       369       anl a, #0x0f
05E9 F8         370       mov R0, a
05EA E5C3       371       mov a, ADCRH   
05EC C4         372       swap a
05ED C0E0       373       push acc
05EF 540F       374       anl a, #0x0f
05F1 F9         375       mov R1, a
05F2 D0E0       376       pop acc
05F4 54F0       377       anl a, #0xf0
05F6 48         378       orl a, R0
05F7 F8         379       mov R0, A    
05F8 22         380            ret
05F9            381            
05F9            382   convert_temp:
05F9 7534B3     383            mov y+0, #low (27315 % 0x10000) 
05FC 75356A     383            mov y+1, #high(27315 % 0x10000) 
05FF 753600     383            mov y+2, #low (27315 / 0x10000) 
0602 753700     383            mov y+3, #high(27315 / 0x10000)         
0605 1201C8     384            lcall sub32
0608 22         385            ret
0609            386   
0609            387   cycle_param:
0609 E54B       388            mov a, param
060B 2401       389            add a, #0x01
060D B40401     390            cjne a, #0x04, cycle_param_ret
0610 E4         391            clr a
0611            392   cycle_param_ret:
0611 F54B       393            mov param, a
0613 22         394            ret
0614            395   
0614            396   param_down:
0614 E54B       397            mov a, param
0616 B4000A     398            cjne a, #0x00, soak_time_down
0619 E543       399            mov a, soak_temp
061B 2499       400            add a, #0x99
061D D4         401            da a
061E F543       402            mov soak_temp, a
0620 02064C     403            ljmp param_down_ret
0623            404   soak_time_down:
0623 B4010A     405            cjne a, #0x01, reflow_temp_down
0626 E544       406            mov a, soak_time
0628 2499       407            add a, #0x99
062A D4         408            da a
062B F544       409            mov soak_time, a
062D 02064C     410            ljmp param_down_ret
0630            411   reflow_temp_down:
0630 B40212     412            cjne a, #0x02, reflow_time_down
0633 E545       413            mov a, reflow_temp
0635 7006       414            jnz reflow_temp_down_b
0637 754540     415            mov reflow_temp, #0x40
063A 02064C     416            ljmp param_down_ret
063D            417   reflow_temp_down_b:      
063D 2499       418            add a, #0x99
063F D4         419            da a
0640 F545       420            mov reflow_temp, a
0642 02064C     421            ljmp param_down_ret
0645            422   reflow_time_down:
0645 E546       423            mov a, reflow_time
0647 2499       424            add a, #0x99
0649 D4         425            da a
064A F546       426            mov reflow_time, a
064C            427   param_down_ret:
064C 22         428            ret
064D            429   
064D            430   param_up:
064D E54B       431            mov a, param
064F B4000A     432            cjne a, #0x00, soak_time_up
0652 E543       433            mov a, soak_temp
0654 2401       434            add a, #0x01
0656 D4         435            da a
0657 F543       436            mov soak_temp, a
0659 020685     437            ljmp param_up_ret
065C            438   soak_time_up:
065C B4010A     439            cjne a, #0x01, reflow_temp_up
065F E544       440            mov a, soak_time
0661 2401       441            add a, #0x01
0663 D4         442            da a
0664 F544       443            mov soak_time, a
0666 020685     444            ljmp param_up_ret
0669            445   reflow_temp_up:  
0669 B40212     446            cjne a, #0x02, reflow_time_up
066C E545       447            mov a, reflow_temp
066E 7006       448            jnz reflow_temp_up_b
0670 754540     449            mov reflow_temp, #0x40
0673 020685     450            ljmp param_up_ret
0676            451   reflow_temp_up_b:        
0676 2401       452            add a, #0x01
0678 D4         453            da a
0679 F545       454            mov reflow_temp, a
067B 020685     455            ljmp param_up_ret
067E            456   reflow_time_up:
067E E546       457            mov a, reflow_time
0680 2401       458            add a, #0x01
0682 D4         459            da a
0683 F546       460            mov reflow_time, a
0685            461   param_up_ret:
0685 22         462            ret
0686            463   
0686            464   toggle_start:
0686 E547       465            mov a, state
0688 6004       466            jz toggle_start_b
068A 754700     467            mov state, #0x00
068D 22         468            ret
068E            469   toggle_start_b:
068E 754701     470            mov state, #0x01
0691 22         471            ret
0692            472            
0692            473            
0692            474   main:
0692 75817F     475            mov sp, #0x7f
0695 1203A1     476            lcall Init_All
0698 120087     477            lcall LCD_4BIT
069B            478   
069B 754900     479            mov timer_secs, #0
069E 754A00     480            mov timer_mins, #0 
06A1 754700     481            mov state, #0
06A4            482   
06A4 754360     483            mov soak_temp, #0x60
06A7 754470     484            mov soak_time, #0x70
06AA 754520     485            mov reflow_temp, #0x20
06AD 754630     486            mov reflow_time, #0x30
06B0            487   
06B0 C201       488            clr half_seconds_flag
06B2 754800     489            mov count_2ms, #0
06B5            490   
06B5 D2CA       491            setb TR2
06B7            492            
06B7            493   
06B7            494   check_state:
06B7 E547       495            mov a, state
06B9 B40003     496            cjne a, #0x00, check_state_b
06BC 0206C1     497            ljmp stopped_loop
06BF            498   check_state_b:
06BF 80F6       499            sjmp check_state
06C1            500   
06C1            501   stopped_loop:
06C1 120481     502            lcall read_pbs
06C4 200203     503            jb Select_button, stopped_loop_b
06C7 120609     504            lcall cycle_param
06CA            505   stopped_loop_b:
06CA 200303     506            jb Down_button, stopped_loop_c
06CD 120614     507            lcall param_down
06D0            508   stopped_loop_c:
06D0 200403     509            jb Up_button, stopped_loop_d
06D3 12064D     510            lcall param_up
06D6            511   stopped_loop_d:
06D6 200503     512            jb Start_button, stopped_loop_e
06D9 120686     513            lcall toggle_start
06DC            514   stopped_loop_e:
06DC 1204F1     515            lcall Display_first_row
06DF 120526     516            lcall Display_second_row
06E2 0206B7     517            ljmp check_state
06E5            518            
06E5            519   Read_Temp:
06E5            520            ; Read the 4.096V voltage reference connected to AIN0 on pin 6
06E5 53E8F0     521            anl ADCCON0, #0xF0
06E8 43E800     522            orl ADCCON0, #0x00 ; Select channel 0
06EB            523   
06EB 1205DE     524            lcall Read_ADC
06EE            525            ; Save result for later use
06EE 8841       526            mov VREF+0, R0
06F0 8942       527            mov VREF+1, R1
06F2            528   
06F2            529            ; Read the signal connected to AIN7
06F2 53E8F0     530            anl ADCCON0, #0xF0
06F5 43E807     531            orl ADCCON0, #0x07 ; Select channel 7
06F8 1205DE     532            lcall Read_ADC
06FB            533       
06FB            534       ; Convert to voltage
06FB 8830       535            mov x+0, R0
06FD 8931       536            mov x+1, R1
06FF            537            ; Pad other bits with zero
06FF 753200     538            mov x+2, #0
0702 753300     539            mov x+3, #0
0705 7534AC     540            mov y+0, #low (41132 % 0x10000) 
0708 7535A0     540            mov y+1, #high(41132 % 0x10000) 
070B 753600     540            mov y+2, #low (41132 / 0x10000) 
070E 753700     540            mov y+3, #high(41132 / 0x10000)  ; The MEASURED reference voltage 4.1132V, with 4 decimal places
0711 12025C     541            lcall mul32
0714            542            ; Retrive the ADC LED value
0714 854134     543            mov y+0, VREF+0
0717 854235     544            mov y+1, VREF+1
071A            545            ; Pad other bits with zero
071A 753600     546            mov y+2, #0
071D 753700     547            mov y+3, #0
0720 1202E9     548            lcall div32
0723            549   
0723 753420     550            mov y+0, #low (800 % 0x10000) 
0726 753503     550            mov y+1, #high(800 % 0x10000) 
0729 753600     550            mov y+2, #low (800 / 0x10000) 
072C 753700     550            mov y+3, #high(800 / 0x10000)                   ; Adjustment based on thermostat readings
072F 1201A7     551            lcall add32
0732            552   
0732 1205F9     553            lcall convert_temp
0735            554   
0735 853038     555            mov cold_junc_temp+0, x+0
0738 853139     556            mov cold_junc_temp+1, x+1
073B 85323A     557            mov cold_junc_temp+2, x+2
073E 85333B     558            mov cold_junc_temp+3, x+3
0741            559   
0741 53E8F0     560            anl ADCCON0, #0xF0
0744 43E801     561            orl ADCCON0, #0x01 ; Select channel 1
0747 1205DE     562            lcall Read_ADC
074A            563   
074A 8830       564            mov x+0, R0
074C 8931       565            mov x+1, R1
074E 753200     566            mov x+2, #0
0751 753300     567            mov x+3, #0
0754            568   
0754 7534AC     569            mov y+0, #low (41132 % 0x10000) 
0757 7535A0     569            mov y+1, #high(41132 % 0x10000) 
075A 753600     569            mov y+2, #low (41132 / 0x10000) 
075D 753700     569            mov y+3, #high(41132 / 0x10000) 
0760 12025C     570            lcall mul32
0763 854134     571            mov y+0, VREF+0
0766 854235     572            mov y+1, VREF+1
0769 753600     573            mov y+2, #0
076C 753700     574            mov y+3, #0
076F 1202E9     575            lcall div32
0772            576   
0772 7534DF     577            mov y+0, #low (7391 % 0x10000) 
0775 75351C     577            mov y+1, #high(7391 % 0x10000) 
0778 753600     577            mov y+2, #low (7391 / 0x10000) 
077B 753700     577            mov y+3, #high(7391 / 0x10000)                  ; Amplifier gain means 73.91 degrees C / Volt
077E 12025C     578            lcall mul32
0781 753410     579            mov y+0, #low (10000 % 0x10000) 
0784 753527     579            mov y+1, #high(10000 % 0x10000) 
0787 753600     579            mov y+2, #low (10000 / 0x10000) 
078A 753700     579            mov y+3, #high(10000 / 0x10000) 
078D 1202E9     580            lcall div32
0790            581   
0790 853834     582            mov y+0, cold_junc_temp+0
0793 853935     583            mov y+1, cold_junc_temp+1
0796 853A36     584            mov y+2, cold_junc_temp+2
0799 853B37     585            mov y+3, cold_junc_temp+3
079C 1201A7     586            lcall add32
079F            587   
079F            588            ; Convert to BCD and display
079F 1200E2     589            lcall hex2bcd
07A2            590   
07A2 120428     591            lcall put_x
07A5            592            
07A5 22         593            ret
07A6            594   END
