0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses an LED as voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26            TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             27   
0000             28            TIMER2_RATE   EQU 100     ; 100Hz, for a timer tick of 10ms
0000             29   TIMER2_RELOAD EQU ((65536-(CLK/(TIMER2_RATE*16))))
0000             30   
0000             31   
0000             32   ORG 0x0000
0000 020694      33            ljmp main
0003             34   
002B             35   ORG 0x002B
002B 020365      36            ljmp Timer2_ISR
002E             37                    
002E             38   cseg
002E             39   ; These 'equ' must match the hardware wiring
002E             40   LCD_RS equ P1.3
002E             41   LCD_E  equ P1.4
002E             42   LCD_D4 equ P0.0
002E             43   LCD_D5 equ P0.1
002E             44   LCD_D6 equ P0.2
002E             45   LCD_D7 equ P0.3  
002E             46   
                 48   	$LIST
00E2             50   
00E2             51   ; These register definitions needed by 'math32.inc'
0030             52   DSEG at 30H
0030             53   x:   ds 4
0034             54   y:   ds 4
0038             55   cold_junc_temp:  ds 4
003C             56   bcd: ds 5
0041             57   VREF: ds 2
0043             58   
0043             59   ; Soldering parameters
0043             60   soak_temp:       ds 1
0044             61   soak_time:       ds 1
0045             62   reflow_temp:     ds 1
0046             63   reflow_time:     ds 1
0047             64   
0047             65   state:   ds 1                    ; 0 is stopped, 1 is heating, 2 is soaking, 3 is reflowing, 4 is cooling
0048             66   count_10ms:      ds 1
0049             67   timer_secs:      ds 1
004A             68   timer_mins:      ds 1
004B             69   
004B             70   pwm_counter:     ds 1
004C             71   pwm:     ds 1
004D             72            
004D             73   param:   ds 1                    ; Determines which parameter is being edited, in the order above
004E             74            
0000             75   BSEG
0000             76   mf: dbit 1
0001             77            
0001             78   ; Buttons are active low
0001             79   Select_button:   dbit 1
0002             80   Down_button:     dbit 1
0003             81   Up_button:       dbit 1
0004             82   Start_button:    dbit 1
0005             83   
                546   $LIST
                 85   	$LIST
0352             87   
0352 DF432000    88   Celsius_Unit_String:     db 0xDF, 'C ', 0
0356 53542000    89   Stop_State_String:       db 'ST ', 0
035A 48542000    90   Heating_State_String:    db 'HT ', 0
035E 534B2000    91   Soaking_State_String:    db 'SK ', 0
0362 524600      92   Reflow_State_String:     db 'RF', 0
0365             93   
0365             94   Timer2_ISR:
0365 C2CF        95            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0367             96            
0367             97            ; The two registers used in the ISR must be saved in the stack
0367 C0E0        98            push acc
0369 C0D0        99            push psw
036B            100   
036B 054B       101            inc pwm_counter
036D C3         102            clr c
036E E54C       103            mov a, pwm
0370 954B       104            subb a, pwm_counter ; If pwm_counter <= pwm then c=1
0372 B3         105            cpl c
0373            106                    ;       mov PWM_OUT, c
0373 E54B       107            mov a, pwm_counter
0375 B4641F     108            cjne a, #100, Timer2_ISR_done
0378 754B00     109            mov pwm_counter, #0
037B            110   
037B            111            
037B 1206EB     112            lcall Read_Temp
037E            113            
037E            114   Inc_Seconds:
037E E549       115            mov a, timer_secs
0380 2401       116            add a, #0x01
0382 D4         117            da a
0383 6460       118            xrl a, #0x60
0385 6006       119            jz Inc_Minutes
0387 6460       120            xrl a, #0x60
0389 F549       121            mov timer_secs, a
038B 800A       122            sjmp Timer2_ISR_done
038D            123   Inc_Minutes:
038D E4         124            clr a
038E F549       125            mov timer_secs, a
0390 E54A       126            mov a, timer_mins
0392 2401       127            add a, #0x01
0394 D4         128            da a
0395 F54A       129            mov timer_mins, a
0397            130   Timer2_ISR_Done:
0397 D0D0       131            pop psw
0399 D0E0       132            pop acc
039B 32         133            reti
039C            134            
039C            135   Init_All:
039C            136            ; Configure all the pins for bidirectional I/O
039C 75AC00     137            mov     P3M1, #0x00
039F 75AD00     138            mov     P3M2, #0x00
03A2 75B300     139            mov     P1M1, #0x00
03A5 75B400     140            mov     P1M2, #0x00
03A8 75B100     141            mov     P0M1, #0x00
03AB 75B200     142            mov     P0M2, #0x00
03AE            143            
03AE 438E10     144            orl     CKCON, #0x10 ; CLK is the input for timer 1
03B1 438780     145            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
03B4 759852     146            mov     SCON, #0x52
03B7 53C4DF     147            anl     T3CON, #0b11011111
03BA 53890F     148            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
03BD 438920     149            orl     TMOD, #0x20 ; Timer 1 Mode 2
03C0 758DF7     150            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
03C3 D28E       151            setb TR1
03C5            152            
03C5            153            ; Using timer 0 for delay functions.  Initialize here:
03C5 C28C       154            clr     TR0 ; Stop timer 0
03C7 438E08     155            orl     CKCON,#0x08 ; CLK is the input for timer 0
03CA 5389F0     156            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
03CD 438901     157            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
03D0            158   
03D0            159                                    ; Using timer 2 for keeping time.
03D0 75C800     160            mov T2CON, #0
03D3 75CDD7     161            mov TH2, #high(TIMER2_RELOAD)
03D6 75CC79     162            mov TL2, #low(TIMER2_RELOAD)
03D9            163   
03D9 43C9A0     164            orl T2MOD, #0b1010_0000
03DC 75CBD7     165            mov RCMP2H, #high(TIMER2_RELOAD)
03DF 75CA79     166            mov RCMP2L, #low(TIMER2_RELOAD)
03E2 754B00     167            mov pwm_counter, #0
03E5            168            ; Init two millisecond interrupt counter.
03E5 E4         169            clr a
03E6 F548       170            mov count_10ms, a
03E8            171            ; Enable the timer and interrupts
03E8 439B80     172            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
03EB            173            
03EB            174            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
03EB 43B382     175            orl     P1M1, #0b10000010
03EE 53B47D     176            anl     P1M2, #0b01111101
03F1            177            
03F1            178            ; Initialize and start the ADC:
03F1 53E8F0     179            anl ADCCON0, #0xF0
03F4 43E807     180            orl ADCCON0, #0x07 ; Select channel 7
03F7            181            ; AINDIDS select if some pins are analog inputs or digital I/O:
03F7 75F600     182            mov AINDIDS, #0x00 ; Disable all analog inputs
03FA 43F683     183            orl AINDIDS, #0b10000011 ; Activate AIN0 and AIN7 analog inputs
03FD 43E101     184            orl ADCCON1, #0x01 ; Enable ADC
0400            185   
0400 D2AF       186            setb EA
0402            187            
0402 22         188            ret
0403            189            
0403            190   wait_1ms:
0403 C28C       191            clr     TR0 ; Stop timer 0
0405 C28D       192            clr     TF0 ; Clear overflow flag
0407 758CBF     193            mov     TH0, #high(TIMER0_RELOAD_1MS)
040A 758A28     194            mov     TL0,#low(TIMER0_RELOAD_1MS)
040D D28C       195            setb TR0
040F 308DFD     196            jnb     TF0, $ ; Wait for overflow
0412 22         197            ret
0413            198   
0413            199   putchar:
0413 3099FD     200       jnb TI, putchar
0416 C299       201       clr TI
0418 F599       202       mov SBUF, a
041A 22         203            ret
041B            204   
041B            205   ; Send a constant-zero-terminated string using the serial port
041B            206   SendString:
041B E4         207       clr A
041C 93         208       movc A, @A+DPTR
041D 6006       209       jz SendStringDone
041F 120413     210       lcall putchar
0422 A3         211       inc DPTR
0423 80F6       212       sjmp SendString
0425            213   SendStringDone:
0425 22         214       ret
0426            215   
0426            216   put_x:
0426 E4         217            clr a
0427 74F0       218            mov a, #240
0429 553E       219            anl a, bcd+2
042B 03         220            rr a
042C 03         221            rr a
042D 03         222            rr a
042E 03         223            rr a
042F 2430       224            add a, #'0'
0431 120413     225            lcall putchar
0434 E4         226            clr a
0435 740F       227            mov a, #15
0437 553E       228            anl a, bcd+2
0439 2430       229            add a, #'0'
043B 120413     230            lcall putchar
043E E4         231            clr a
043F 74F0       232            mov a, #240
0441 553D       233            anl a, bcd+1
0443 03         234            rr a
0444 03         235            rr a
0445 03         236            rr a
0446 03         237            rr a
0447 2430       238            add a, #'0'
0449 120413     239            lcall putchar
044C E4         240            clr a
044D 740F       241            mov a, #15
044F 553D       242            anl a, bcd+1
0451 2430       243            add a, #'0'
0453 120413     244            lcall putchar
0456 E4         245            clr a
0457 74F0       246            mov a, #240
0459 553C       247            anl a, bcd+0
045B 03         248            rr a
045C 03         249            rr a
045D 03         250            rr a
045E 03         251            rr a
045F 2430       252            add a, #'0'
0461 120413     253            lcall putchar
0464 E4         254            clr a
0465 740F       255            mov a, #15
0467 553C       256            anl a, bcd+0
0469 2430       257            add a, #'0'
046B 120413     258            lcall putchar
046E 740D       259            mov a, #'\r'
0470 120413     260            lcall putchar
0473 740A       261            mov a, #'\n'
0475 120413     262            lcall putchar
0478 22         263            ret
0479            264   
0479            265   ; Wait the number of miliseconds in R2
0479            266   waitms:
0479 120403     267            lcall wait_1ms
047C DAFB       268            djnz R2, waitms
047E 22         269            ret
047F            270   
047F            271   read_pbs:
047F D295       272            setb P1.5
0481 D201       273            setb Select_button
0483 D202       274            setb Down_button
0485 D203       275            setb Up_button
0487 D204       276            setb Start_button
0489 D280       277            setb P0.0
048B D281       278            setb P0.1
048D D282       279            setb P0.2
048F D283       280            setb P0.3
0491            281   
0491 C283       282            clr P0.3
0493 209505     283            jb P1.5, check_up
0496 3095FD     284            jnb P1.5, $
0499 C201       285            clr Select_button
049B            286   check_up:
049B D283       287            setb P0.3
049D C281       288            clr P0.1
049F 209505     289            jb P1.5, check_down
04A2 3095FD     290            jnb P1.5, $
04A5 C203       291            clr Up_button
04A7            292   check_down:
04A7 D281       293            setb P0.1
04A9 C282       294            clr P0.2
04AB 209505     295            jb P1.5, check_start
04AE 3095FD     296            jnb P1.5, $
04B1 C202       297            clr Down_button
04B3            298   check_start:
04B3 D281       299            setb P0.1
04B5 C280       300            clr P0.0
04B7 209505     301            jb P1.5, read_pbs_ret
04BA 3095FD     302            jnb P1.5, $
04BD C204       303            clr Start_button
04BF            304   read_pbs_ret:
04BF 22         305            ret
04C0            306            
04C0            307            
04C0            308   display_units:
04C0 C083       309            push dph
04C2 C082       309            push dpl
04C4 C0E0       309            push acc
04C6 900352     309            mov dptr, #Celsius_Unit_String
04C9 1200BA     309            lcall ?Send_Constant_String
04CC D0E0       309            pop acc
04CE D082       309            pop dpl
04D0 D083       309            pop dph
04D2 22         310            ret
04D3            311   
04D3            312   display_time:
04D3 C000       313            push ar0
04D5 A84A       313            mov r0, timer_mins
04D7 1200CC     313            lcall ?Display_BCD
04DA D000       313            pop ar0
04DC C0E0       314            push acc
04DE 743A       314            mov a, #':'
04E0 12007D     314            lcall ?WriteData
04E3 D0E0       314            pop acc
04E5 C000       315            push ar0
04E7 A849       315            mov r0, timer_secs
04E9 1200CC     315            lcall ?Display_BCD
04EC D000       315            pop ar0
04EE 22         316            ret
04EF            317            
04EF            318   ; We can display a number any way we want.  In this case with
04EF            319   ; four decimal places.
04EF            320   Display_first_row:
04EF C0E0       321            push acc
04F1 7401       321            mov a, #1
04F3 14         321            dec a
04F4 1200C7     321            lcall ?Set_Cursor_1 ; Select column and row
04F7 D0E0       321            pop acc
04F9 C000       322            push ar0
04FB A83E       322            mov r0, bcd+2
04FD 1200CC     322            lcall ?Display_BCD
0500 D000       322            pop ar0
0502 C000       323            push ar0
0504 A83D       323            mov r0, bcd+1
0506 1200CC     323            lcall ?Display_BCD
0509 D000       323            pop ar0
050B C0E0       324            push acc
050D 742E       324            mov a, #'.'
050F 12007D     324            lcall ?WriteData
0512 D0E0       324            pop acc
0514 C000       325            push ar0
0516 A83C       325            mov r0, bcd+0
0518 1200CC     325            lcall ?Display_BCD
051B D000       325            pop ar0
051D 1204C0     326            lcall display_units
0520 1204D3     327            lcall display_time
0523 22         328            ret
0524            329   
0524            330   Display_second_row:
0524 C0E0       331            push acc
0526 7401       331            mov a, #1
0528 14         331            dec a
0529 1200C5     331            lcall ?Set_Cursor_2 ; Select column and row
052C D0E0       331            pop acc
052E E547       332            mov a, state
0530 B40015     333            cjne a, #0x00, display_heating_state
0533 C083       334            push dph
0535 C082       334            push dpl
0537 C0E0       334            push acc
0539 900356     334            mov dptr, #Stop_State_String
053C 1200BA     334            lcall ?Send_Constant_String
053F D0E0       334            pop acc
0541 D082       334            pop dpl
0543 D083       334            pop dph
0545 02058A     335            ljmp Display_second_row_b
0548            336   display_heating_state:
0548 B40115     337            cjne a, #0x01, display_soaking_state
054B C083       338            push dph
054D C082       338            push dpl
054F C0E0       338            push acc
0551 90035A     338            mov dptr, #Heating_State_String
0554 1200BA     338            lcall ?Send_Constant_String
0557 D0E0       338            pop acc
0559 D082       338            pop dpl
055B D083       338            pop dph
055D 02058A     339            ljmp Display_second_row_b
0560            340   display_soaking_state:
0560 B40215     341            cjne a, #0x02, display_reflow_state
0563 C083       342            push dph
0565 C082       342            push dpl
0567 C0E0       342            push acc
0569 90035E     342            mov dptr, #Soaking_State_String
056C 1200BA     342            lcall ?Send_Constant_String
056F D0E0       342            pop acc
0571 D082       342            pop dpl
0573 D083       342            pop dph
0575 02058A     343            ljmp Display_second_row_b
0578            344   display_reflow_state:
0578 C083       345            push dph
057A C082       345            push dpl
057C C0E0       345            push acc
057E 900362     345            mov dptr, #Reflow_State_String
0581 1200BA     345            lcall ?Send_Constant_String
0584 D0E0       345            pop acc
0586 D082       345            pop dpl
0588 D083       345            pop dph
058A            346   Display_second_row_b:
058A C0E0       347            push acc
058C 7431       347            mov a, #'1'
058E 12007D     347            lcall ?WriteData
0591 D0E0       347            pop acc
0593 C000       348            push ar0
0595 A843       348            mov r0, soak_temp
0597 1200CC     348            lcall ?Display_BCD
059A D000       348            pop ar0
059C C0E0       349            push acc
059E 7420       349            mov a, #' '
05A0 12007D     349            lcall ?WriteData
05A3 D0E0       349            pop acc
05A5 C000       350            push ar0
05A7 A844       350            mov r0, soak_time
05A9 1200CC     350            lcall ?Display_BCD
05AC D000       350            pop ar0
05AE C0E0       351            push acc
05B0 7420       351            mov a, #' '
05B2 12007D     351            lcall ?WriteData
05B5 D0E0       351            pop acc
05B7 C0E0       352            push acc
05B9 7432       352            mov a, #'2'
05BB 12007D     352            lcall ?WriteData
05BE D0E0       352            pop acc
05C0 C000       353            push ar0
05C2 A845       353            mov r0, reflow_temp
05C4 1200CC     353            lcall ?Display_BCD
05C7 D000       353            pop ar0
05C9 C0E0       354            push acc
05CB 7420       354            mov a, #' '
05CD 12007D     354            lcall ?WriteData
05D0 D0E0       354            pop acc
05D2 C000       355            push ar0
05D4 A846       355            mov r0, reflow_time
05D6 1200CC     355            lcall ?Display_BCD
05D9 D000       355            pop ar0
05DB 22         356            ret
05DC            357            
05DC            358            
05DC            359   
05DC            360   Read_ADC:
05DC C2EF       361            clr ADCF
05DE D2EE       362            setb ADCS ;  ADC start trigger signal
05E0 30EFFD     363       jnb ADCF, $ ; Wait for conversion complete
05E3            364       
05E3            365       ; Read the ADC result and store in [R1, R0]
05E3 E5C2       366       mov a, ADCRL
05E5 540F       367       anl a, #0x0f
05E7 F8         368       mov R0, a
05E8 E5C3       369       mov a, ADCRH   
05EA C4         370       swap a
05EB C0E0       371       push acc
05ED 540F       372       anl a, #0x0f
05EF F9         373       mov R1, a
05F0 D0E0       374       pop acc
05F2 54F0       375       anl a, #0xf0
05F4 48         376       orl a, R0
05F5 F8         377       mov R0, A    
05F6 22         378            ret
05F7            379            
05F7            380   convert_temp:
05F7 7534B3     381            mov y+0, #low (27315 % 0x10000) 
05FA 75356A     381            mov y+1, #high(27315 % 0x10000) 
05FD 753600     381            mov y+2, #low (27315 / 0x10000) 
0600 753700     381            mov y+3, #high(27315 / 0x10000)         
0603 1201C8     382            lcall sub32
0606 22         383            ret
0607            384   
0607            385   cycle_param:
0607 E54D       386            mov a, param
0609 2401       387            add a, #0x01
060B B40401     388            cjne a, #0x04, cycle_param_ret
060E E4         389            clr a
060F            390   cycle_param_ret:
060F F54D       391            mov param, a
0611 22         392            ret
0612            393   
0612            394   param_down:
0612 E54D       395            mov a, param
0614 B4000A     396            cjne a, #0x00, soak_time_down
0617 E543       397            mov a, soak_temp
0619 2499       398            add a, #0x99
061B D4         399            da a
061C F543       400            mov soak_temp, a
061E 02064A     401            ljmp param_down_ret
0621            402   soak_time_down:
0621 B4010A     403            cjne a, #0x01, reflow_temp_down
0624 E544       404            mov a, soak_time
0626 2499       405            add a, #0x99
0628 D4         406            da a
0629 F544       407            mov soak_time, a
062B 02064A     408            ljmp param_down_ret
062E            409   reflow_temp_down:
062E B40212     410            cjne a, #0x02, reflow_time_down
0631 E545       411            mov a, reflow_temp
0633 7006       412            jnz reflow_temp_down_b
0635 754540     413            mov reflow_temp, #0x40
0638 02064A     414            ljmp param_down_ret
063B            415   reflow_temp_down_b:      
063B 2499       416            add a, #0x99
063D D4         417            da a
063E F545       418            mov reflow_temp, a
0640 02064A     419            ljmp param_down_ret
0643            420   reflow_time_down:
0643 E546       421            mov a, reflow_time
0645 2499       422            add a, #0x99
0647 D4         423            da a
0648 F546       424            mov reflow_time, a
064A            425   param_down_ret:
064A 22         426            ret
064B            427   
064B            428   param_up:
064B E54D       429            mov a, param
064D B4000A     430            cjne a, #0x00, soak_time_up
0650 E543       431            mov a, soak_temp
0652 2401       432            add a, #0x01
0654 D4         433            da a
0655 F543       434            mov soak_temp, a
0657 020687     435            ljmp param_up_ret
065A            436   soak_time_up:
065A B4010A     437            cjne a, #0x01, reflow_temp_up
065D E544       438            mov a, soak_time
065F 2401       439            add a, #0x01
0661 D4         440            da a
0662 F544       441            mov soak_time, a
0664 020687     442            ljmp param_up_ret
0667            443   reflow_temp_up:  
0667 B40216     444            cjne a, #0x02, reflow_time_up
066A E545       445            mov a, reflow_temp
066C 6440       446            xrl a, #0x40
066E 7006       447            jnz reflow_temp_up_b
0670 754500     448            mov reflow_temp, #0x00
0673 020687     449            ljmp param_up_ret
0676            450   reflow_temp_up_b:
0676 6440       451            xrl a, #0x40
0678 2401       452            add a, #0x01
067A D4         453            da a
067B F545       454            mov reflow_temp, a
067D 020687     455            ljmp param_up_ret
0680            456   reflow_time_up:
0680 E546       457            mov a, reflow_time
0682 2401       458            add a, #0x01
0684 D4         459            da a
0685 F546       460            mov reflow_time, a
0687            461   param_up_ret:
0687 22         462            ret
0688            463   
0688            464   toggle_start:
0688 E547       465            mov a, state
068A 6004       466            jz toggle_start_b
068C 754700     467            mov state, #0x00
068F 22         468            ret
0690            469   toggle_start_b:
0690 754701     470            mov state, #0x01
0693 22         471            ret
0694            472            
0694            473            
0694            474   main:
0694 75817F     475            mov sp, #0x7f
0697 12039C     476            lcall Init_All
069A 120087     477            lcall LCD_4BIT
069D            478   
069D 754900     479            mov timer_secs, #0
06A0 754A00     480            mov timer_mins, #0 
06A3 754700     481            mov state, #0
06A6            482   
06A6 754360     483            mov soak_temp, #0x60
06A9 754470     484            mov soak_time, #0x70
06AC 754520     485            mov reflow_temp, #0x20
06AF 754630     486            mov reflow_time, #0x30
06B2            487   
06B2 754C00     488            mov pwm, #0
06B5 754B00     489            mov pwm_counter, #0
06B8 754800     490            mov count_10ms, #0
06BB            491   
06BB D2CA       492            setb TR2
06BD            493            
06BD            494   
06BD            495   check_state:
06BD E547       496            mov a, state
06BF B40003     497            cjne a, #0x00, check_state_b
06C2 0206C7     498            ljmp stopped_loop
06C5            499   check_state_b:
06C5 80F6       500            sjmp check_state
06C7            501   
06C7            502   stopped_loop:
06C7 12047F     503            lcall read_pbs
06CA 200103     504            jb Select_button, stopped_loop_b
06CD 120607     505            lcall cycle_param
06D0            506   stopped_loop_b:
06D0 200203     507            jb Down_button, stopped_loop_c
06D3 120612     508            lcall param_down
06D6            509   stopped_loop_c:
06D6 200303     510            jb Up_button, stopped_loop_d
06D9 12064B     511            lcall param_up
06DC            512   stopped_loop_d:
06DC 200403     513            jb Start_button, stopped_loop_e
06DF 120688     514            lcall toggle_start
06E2            515   stopped_loop_e:
06E2 1204EF     516            lcall Display_first_row
06E5 120524     517            lcall Display_second_row
06E8 0206BD     518            ljmp check_state
06EB            519            
06EB            520   Read_Temp:
06EB            521            ; Read the 4.096V voltage reference connected to AIN0 on pin 6
06EB 53E8F0     522            anl ADCCON0, #0xF0
06EE 43E800     523            orl ADCCON0, #0x00 ; Select channel 0
06F1            524   
06F1 1205DC     525            lcall Read_ADC
06F4            526            ; Save result for later use
06F4 8841       527            mov VREF+0, R0
06F6 8942       528            mov VREF+1, R1
06F8            529   
06F8            530            ; Read the signal connected to AIN7
06F8 53E8F0     531            anl ADCCON0, #0xF0
06FB 43E807     532            orl ADCCON0, #0x07 ; Select channel 7
06FE 1205DC     533            lcall Read_ADC
0701            534       
0701            535       ; Convert to voltage
0701 8830       536            mov x+0, R0
0703 8931       537            mov x+1, R1
0705            538            ; Pad other bits with zero
0705 753200     539            mov x+2, #0
0708 753300     540            mov x+3, #0
070B 7534AC     541            mov y+0, #low (41132 % 0x10000) 
070E 7535A0     541            mov y+1, #high(41132 % 0x10000) 
0711 753600     541            mov y+2, #low (41132 / 0x10000) 
0714 753700     541            mov y+3, #high(41132 / 0x10000)  ; The MEASURED reference voltage 4.1132V, with 4 decimal places
0717 12025C     542            lcall mul32
071A            543            ; Retrive the ADC LED value
071A 854134     544            mov y+0, VREF+0
071D 854235     545            mov y+1, VREF+1
0720            546            ; Pad other bits with zero
0720 753600     547            mov y+2, #0
0723 753700     548            mov y+3, #0
0726 1202E9     549            lcall div32
0729            550   
0729 753420     551            mov y+0, #low (800 % 0x10000) 
072C 753503     551            mov y+1, #high(800 % 0x10000) 
072F 753600     551            mov y+2, #low (800 / 0x10000) 
0732 753700     551            mov y+3, #high(800 / 0x10000)                   ; Adjustment based on thermostat readings
0735 1201A7     552            lcall add32
0738            553   
0738 1205F7     554            lcall convert_temp
073B            555   
073B 853038     556            mov cold_junc_temp+0, x+0
073E 853139     557            mov cold_junc_temp+1, x+1
0741 85323A     558            mov cold_junc_temp+2, x+2
0744 85333B     559            mov cold_junc_temp+3, x+3
0747            560   
0747 53E8F0     561            anl ADCCON0, #0xF0
074A 43E801     562            orl ADCCON0, #0x01 ; Select channel 1
074D 1205DC     563            lcall Read_ADC
0750            564   
0750 8830       565            mov x+0, R0
0752 8931       566            mov x+1, R1
0754 753200     567            mov x+2, #0
0757 753300     568            mov x+3, #0
075A            569   
075A 7534AC     570            mov y+0, #low (41132 % 0x10000) 
075D 7535A0     570            mov y+1, #high(41132 % 0x10000) 
0760 753600     570            mov y+2, #low (41132 / 0x10000) 
0763 753700     570            mov y+3, #high(41132 / 0x10000) 
0766 12025C     571            lcall mul32
0769 854134     572            mov y+0, VREF+0
076C 854235     573            mov y+1, VREF+1
076F 753600     574            mov y+2, #0
0772 753700     575            mov y+3, #0
0775 1202E9     576            lcall div32
0778            577   
0778 7534DF     578            mov y+0, #low (7391 % 0x10000) 
077B 75351C     578            mov y+1, #high(7391 % 0x10000) 
077E 753600     578            mov y+2, #low (7391 / 0x10000) 
0781 753700     578            mov y+3, #high(7391 / 0x10000)                  ; Amplifier gain means 73.91 degrees C / Volt
0784 12025C     579            lcall mul32
0787 753410     580            mov y+0, #low (10000 % 0x10000) 
078A 753527     580            mov y+1, #high(10000 % 0x10000) 
078D 753600     580            mov y+2, #low (10000 / 0x10000) 
0790 753700     580            mov y+3, #high(10000 / 0x10000) 
0793 1202E9     581            lcall div32
0796            582   
0796 853834     583            mov y+0, cold_junc_temp+0
0799 853935     584            mov y+1, cold_junc_temp+1
079C 853A36     585            mov y+2, cold_junc_temp+2
079F 853B37     586            mov y+3, cold_junc_temp+3
07A2 1201A7     587            lcall add32
07A5            588   
07A5            589            ; Convert to BCD and display
07A5 1200E2     590            lcall hex2bcd
07A8            591   
07A8 120426     592            lcall put_x
07AB            593            
07AB 22         594            ret
07AC            595   END
