0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses an LED as voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             24   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             25   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             26   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             27   
0000             28   ORG 0x0000
0000 02046D      29            ljmp main
0003             30   
0003             31   ;                     1234567890123456    <- This helps determine the location of the counter
0003 54656D70    32   temp_message:     db 'Temperature:', 0
     65726174
     7572653A
     00
0010             33   cseg
0010             34   ; These 'equ' must match the hardware wiring
0010             35   LCD_RS equ P1.3
0010             36   LCD_E  equ P1.4
0010             37   LCD_D4 equ P0.0
0010             38   LCD_D5 equ P0.1
0010             39   LCD_D6 equ P0.2
0010             40            LCD_D7 equ P0.3
0010             41   MODE_BUTTON equ P1.5     
0010             42   
                 44   	$LIST
00C4             46   
00C4             47   ; These register definitions needed by 'math32.inc'
0030             48   DSEG at 30H
0030             49   x:   ds 4
0034             50   y:   ds 4
0038             51   cold_junc_temp:  ds 4
003C             52   bcd: ds 5
0041             53   VREF: ds 2
0043             54   
0000             55   BSEG
0000             56   mf: dbit 1
0001             57   
                546   $LIST
                 59   	$LIST
0334             61   
0334 DF4300      62   Celsius_Unit_String:     db 0xDF, 'C', 0
0337             63            
0337             64   Init_All:
0337             65            ; Configure all the pins for bidirectional I/O
0337 75AC00      66            mov     P3M1, #0x00
033A 75AD00      67            mov     P3M2, #0x00
033D 75B300      68            mov     P1M1, #0x00
0340 75B400      69            mov     P1M2, #0x00
0343 75B100      70            mov     P0M1, #0x00
0346 75B200      71            mov     P0M2, #0x00
0349             72            
0349 438E10      73            orl     CKCON, #0x10 ; CLK is the input for timer 1
034C 438780      74            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
034F 759852      75            mov     SCON, #0x52
0352 53C4DF      76            anl     T3CON, #0b11011111
0355 53890F      77            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
0358 438920      78            orl     TMOD, #0x20 ; Timer 1 Mode 2
035B 758DF7      79            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
035E D28E        80            setb TR1
0360             81            
0360             82            ; Using timer 0 for delay functions.  Initialize here:
0360 C28C        83            clr     TR0 ; Stop timer 0
0362 438E08      84            orl     CKCON,#0x08 ; CLK is the input for timer 0
0365 5389F0      85            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
0368 438901      86            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
036B             87            
036B             88            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
036B 43B382      89            orl     P1M1, #0b10000010
036E 53B47D      90            anl     P1M2, #0b01111101
0371             91            
0371             92            ; Initialize and start the ADC:
0371 53E8F0      93            anl ADCCON0, #0xF0
0374 43E807      94            orl ADCCON0, #0x07 ; Select channel 7
0377             95            ; AINDIDS select if some pins are analog inputs or digital I/O:
0377 75F600      96            mov AINDIDS, #0x00 ; Disable all analog inputs
037A 43F683      97            orl AINDIDS, #0b10000011 ; Activate AIN0 and AIN7 analog inputs
037D 43E101      98            orl ADCCON1, #0x01 ; Enable ADC
0380             99            
0380 22         100            ret
0381            101            
0381            102   wait_1ms:
0381 C28C       103            clr     TR0 ; Stop timer 0
0383 C28D       104            clr     TF0 ; Clear overflow flag
0385 758CBF     105            mov     TH0, #high(TIMER0_RELOAD_1MS)
0388 758A28     106            mov     TL0,#low(TIMER0_RELOAD_1MS)
038B D28C       107            setb TR0
038D 308DFD     108            jnb     TF0, $ ; Wait for overflow
0390 22         109            ret
0391            110   
0391            111   putchar:
0391 3099FD     112       jnb TI, putchar
0394 C299       113       clr TI
0396 F599       114       mov SBUF, a
0398 22         115            ret
0399            116   
0399            117   ; Send a constant-zero-terminated string using the serial port
0399            118   SendString:
0399 E4         119       clr A
039A 93         120       movc A, @A+DPTR
039B 6006       121       jz SendStringDone
039D 120391     122       lcall putchar
03A0 A3         123       inc DPTR
03A1 80F6       124       sjmp SendString
03A3            125   SendStringDone:
03A3 22         126       ret
03A4            127   
03A4            128   put_x:
03A4 E4         129            clr a
03A5 74F0       130            mov a, #240
03A7 553E       131            anl a, bcd+2
03A9 03         132            rr a
03AA 03         133            rr a
03AB 03         134            rr a
03AC 03         135            rr a
03AD 2430       136            add a, #'0'
03AF 120391     137            lcall putchar
03B2 E4         138            clr a
03B3 740F       139            mov a, #15
03B5 553E       140            anl a, bcd+2
03B7 2430       141            add a, #'0'
03B9 120391     142            lcall putchar
03BC E4         143            clr a
03BD 74F0       144            mov a, #240
03BF 553D       145            anl a, bcd+1
03C1 03         146            rr a
03C2 03         147            rr a
03C3 03         148            rr a
03C4 03         149            rr a
03C5 2430       150            add a, #'0'
03C7 120391     151            lcall putchar
03CA E4         152            clr a
03CB 740F       153            mov a, #15
03CD 553D       154            anl a, bcd+1
03CF 2430       155            add a, #'0'
03D1 120391     156            lcall putchar
03D4 E4         157            clr a
03D5 74F0       158            mov a, #240
03D7 553C       159            anl a, bcd+0
03D9 03         160            rr a
03DA 03         161            rr a
03DB 03         162            rr a
03DC 03         163            rr a
03DD 2430       164            add a, #'0'
03DF 120391     165            lcall putchar
03E2 E4         166            clr a
03E3 740F       167            mov a, #15
03E5 553C       168            anl a, bcd+0
03E7 2430       169            add a, #'0'
03E9 120391     170            lcall putchar
03EC 740D       171            mov a, #'\r'
03EE 120391     172            lcall putchar
03F1 740A       173            mov a, #'\n'
03F3 120391     174            lcall putchar
03F6 22         175            ret
03F7            176   
03F7            177   ; Wait the number of miliseconds in R2
03F7            178   waitms:
03F7 120381     179            lcall wait_1ms
03FA DAFB       180            djnz R2, waitms
03FC 22         181            ret
03FD            182   
03FD            183   display_units:
03FD C083       184            push dph
03FF C082       184            push dpl
0401 C0E0       184            push acc
0403 900334     184            mov dptr, #Celsius_Unit_String
0406 12009C     184            lcall ?Send_Constant_String
0409 D0E0       184            pop acc
040B D082       184            pop dpl
040D D083       184            pop dph
040F 22         185            ret
0410            186            
0410            187   ; We can display a number any way we want.  In this case with
0410            188   ; four decimal places.
0410            189   Display_formated_BCD:
0410 C0E0       190            push acc
0412 7401       190            mov a, #1
0414 14         190            dec a
0415 1200A7     190            lcall ?Set_Cursor_2 ; Select column and row
0418 D0E0       190            pop acc
041A C000       191            push ar0
041C A83E       191            mov r0, bcd+2
041E 1200AE     191            lcall ?Display_BCD
0421 D000       191            pop ar0
0423 C000       192            push ar0
0425 A83D       192            mov r0, bcd+1
0427 1200AE     192            lcall ?Display_BCD
042A D000       192            pop ar0
042C C0E0       193            push acc
042E 742E       193            mov a, #'.'
0430 12005F     193            lcall ?WriteData
0433 D0E0       193            pop acc
0435 C000       194            push ar0
0437 A83C       194            mov r0, bcd+0
0439 1200AE     194            lcall ?Display_BCD
043C D000       194            pop ar0
043E 1203FD     195            lcall display_units
0441 22         196            ret
0442            197   
0442            198   Read_ADC:
0442 C2EF       199            clr ADCF
0444 D2EE       200            setb ADCS ;  ADC start trigger signal
0446 30EFFD     201       jnb ADCF, $ ; Wait for conversion complete
0449            202       
0449            203       ; Read the ADC result and store in [R1, R0]
0449 E5C2       204       mov a, ADCRL
044B 540F       205       anl a, #0x0f
044D F8         206       mov R0, a
044E E5C3       207       mov a, ADCRH   
0450 C4         208       swap a
0451 C0E0       209       push acc
0453 540F       210       anl a, #0x0f
0455 F9         211       mov R1, a
0456 D0E0       212       pop acc
0458 54F0       213       anl a, #0xf0
045A 48         214       orl a, R0
045B F8         215       mov R0, A
045C 22         216            ret
045D            217            
045D            218   convert_temp:
045D 7534B3     219            mov y+0, #low (27315 % 0x10000) 
0460 75356A     219            mov y+1, #high(27315 % 0x10000) 
0463 753600     219            mov y+2, #low (27315 / 0x10000) 
0466 753700     219            mov y+3, #high(27315 / 0x10000)         
0469 1201AA     220            lcall sub32
046C 22         221            ret
046D            222            
046D            223   main:
046D 75817F     224            mov sp, #0x7f
0470 120337     225            lcall Init_All
0473 120069     226            lcall LCD_4BIT
0476            227   
0476            228       ; initial messages in LCD
0476 C0E0       229            push acc
0478 7401       229            mov a, #1
047A 14         229            dec a
047B 1200A9     229            lcall ?Set_Cursor_1 ; Select column and row
047E D0E0       229            pop acc
0480 C083       230            push dph
0482 C082       230            push dpl
0484 C0E0       230            push acc
0486 900003     230            mov dptr, #temp_message
0489 12009C     230            lcall ?Send_Constant_String
048C D0E0       230            pop acc
048E D082       230            pop dpl
0490 D083       230            pop dph
0492 C0E0       231            push acc
0494 7401       231            mov a, #1
0496 14         231            dec a
0497 1200A7     231            lcall ?Set_Cursor_2 ; Select column and row
049A D0E0       231            pop acc
049C            232       
049C            233   Forever:
049C            234            ; Read the 2.08V LED voltage connected to AIN0 on pin 6
049C 53E8F0     235            anl ADCCON0, #0xF0
049F 43E800     236            orl ADCCON0, #0x00 ; Select channel 0
04A2            237   
04A2 120442     238            lcall Read_ADC
04A5            239            ; Save result for later use
04A5 8841       240            mov VREF+0, R0
04A7 8942       241            mov VREF+1, R1
04A9            242   
04A9            243            ; Read the signal connected to AIN7
04A9 53E8F0     244            anl ADCCON0, #0xF0
04AC 43E807     245            orl ADCCON0, #0x07 ; Select channel 7
04AF 120442     246            lcall Read_ADC
04B2            247       
04B2            248       ; Convert to voltage
04B2 8830       249            mov x+0, R0
04B4 8931       250            mov x+1, R1
04B6            251            ; Pad other bits with zero
04B6 753200     252            mov x+2, #0
04B9 753300     253            mov x+3, #0
04BC 7534AC     254            mov y+0, #low (41132 % 0x10000) 
04BF 7535A0     254            mov y+1, #high(41132 % 0x10000) 
04C2 753600     254            mov y+2, #low (41132 / 0x10000) 
04C5 753700     254            mov y+3, #high(41132 / 0x10000)  ; The MEASURED LED voltage: 2.074V, with 4 decimal places
04C8 12023E     255            lcall mul32
04CB            256            ; Retrive the ADC LED value
04CB 854134     257            mov y+0, VREF+0
04CE 854235     258            mov y+1, VREF+1
04D1            259            ; Pad other bits with zero
04D1 753600     260            mov y+2, #0
04D4 753700     261            mov y+3, #0
04D7 1202CB     262            lcall div32
04DA            263   
04DA 753420     264            mov y+0, #low (800 % 0x10000) 
04DD 753503     264            mov y+1, #high(800 % 0x10000) 
04E0 753600     264            mov y+2, #low (800 / 0x10000) 
04E3 753700     264            mov y+3, #high(800 / 0x10000)                   ; Adjustment based on thermostat readings
04E6 120189     265            lcall add32
04E9            266   
04E9 12045D     267            lcall convert_temp
04EC            268   
04EC 853038     269            mov cold_junc_temp+0, x+0
04EF 853139     270            mov cold_junc_temp+1, x+1
04F2 85323A     271            mov cold_junc_temp+2, x+2
04F5 85333B     272            mov cold_junc_temp+3, x+3
04F8            273   
04F8 53E8F0     274            anl ADCCON0, #0xF0
04FB 43E801     275            orl ADCCON0, #0x01 ; Select channel 1
04FE 120442     276            lcall Read_ADC
0501            277   
0501 8830       278            mov x+0, R0
0503 8931       279            mov x+1, R1
0505 753200     280            mov x+2, #0
0508 753300     281            mov x+3, #0
050B            282   
050B 7534AC     283            mov y+0, #low (41132 % 0x10000) 
050E 7535A0     283            mov y+1, #high(41132 % 0x10000) 
0511 753600     283            mov y+2, #low (41132 / 0x10000) 
0514 753700     283            mov y+3, #high(41132 / 0x10000) 
0517 12023E     284            lcall mul32
051A 854134     285            mov y+0, VREF+0
051D 854235     286            mov y+1, VREF+1
0520 753600     287            mov y+2, #0
0523 753700     288            mov y+3, #0
0526 1202CB     289            lcall div32
0529            290   
0529 7534DF     291            mov y+0, #low (7391 % 0x10000) 
052C 75351C     291            mov y+1, #high(7391 % 0x10000) 
052F 753600     291            mov y+2, #low (7391 / 0x10000) 
0532 753700     291            mov y+3, #high(7391 / 0x10000)                  ; Amplifier gain means 73.91 degrees C / Volt
0535 12023E     292            lcall mul32
0538 753410     293            mov y+0, #low (10000 % 0x10000) 
053B 753527     293            mov y+1, #high(10000 % 0x10000) 
053E 753600     293            mov y+2, #low (10000 / 0x10000) 
0541 753700     293            mov y+3, #high(10000 / 0x10000) 
0544 1202CB     294            lcall div32
0547            295   
0547 853834     296            mov y+0, cold_junc_temp+0
054A 853935     297            mov y+1, cold_junc_temp+1
054D 853A36     298            mov y+2, cold_junc_temp+2
0550 853B37     299            mov y+3, cold_junc_temp+3
0553 120189     300            lcall add32
0556            301   
0556            302            ; Convert to BCD and display
0556 1200C4     303            lcall hex2bcd
0559 120410     304            lcall Display_formated_BCD
055C            305   
055C 1203A4     306            lcall put_x
055F            307            
055F            308            ; Wait 500 ms between conversions
055F 7AFA       309            mov R2, #250
0561 1203F7     310            lcall waitms
0564 7AFA       311            mov R2, #250
0566 1203F7     312            lcall waitms
0569            313            
0569 02049C     314            ljmp Forever
056C            315   END
